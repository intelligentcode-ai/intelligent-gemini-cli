# Large PRB Template - Complex Features with Sub-PRBs
# Auto-selected for sophisticated instruction complexity (16-30 points) - AI executes instantly  
# Manages multiple Medium/Tiny PRBs with advanced coordination

# ⚠️ CRITICAL: ALL 6 SECTIONS MANDATORY - SKIP NOTHING
# ⚠️ SETTINGS ENFORCEMENT: git_privacy: true = NO AI mentions in commits
# ⚠️ SUB-PRB INHERITANCE: All sub-PRBs inherit ALL 6 mandatory sections

id: "[PARENT_ID]-PRB-[NEXT_NUMBER]-[TITLE]-[CURRENT_DATE]"
type: large-prb
complexity: complex
priority: "[PRIORITY_LEVEL]"  # CRITICAL, HIGH, MEDIUM, LOW
title: "[EPIC_OR_STORY_TITLE]"
requires_decomposition: true

# MANDATORY: Complete Context Section
complete_context:
  project: "Dynamically injected project context from GEMINI.md."
  settings: "Dynamically injected all configuration values."
  git_privacy: "Dynamically injected git_privacy setting from config."
  branch_protection: "Dynamically injected branch_protection from config."
  default_branch: "Dynamically injected default_branch from config."
  branch_strategy: "Dynamically injected branch_prefixes from config."
  business_goal: "Describe the overarching business objective this large feature addresses."
  technical_scope: "Outline the system components or areas affected by this feature."
  best_practices: [] # Dynamically injected relevant best practices.
  
# MANDATORY: Requirements Section
requirements:
  functional:
    - "Describe the high-level functional requirements for this large feature."
    - "Break down complex user stories into manageable functional components."
    - "Specify expected system behaviors and interactions."
  processual:
    - "Respect git_privacy setting for all sub-PRB commits"
    - "Follow branch protection strategy across all components"
    - "Use configured default branch for final integration"
    - "Apply configured branch naming for feature branches"
    - "Coordinate sub-PRB execution with proper sequencing"
  technical:
    - "Multi-component system integration"
    - "Complex feature coordination"
    - "16-30 instruction sophistication management"

# Automatic sub-PRB generation
sub_prbs:
  # ALL SUB-PRBS INHERIT COMPLETE CONTEXT AND MANDATORY SECTIONS
  - id: "Dynamically generated ID (e.g., MEDIUM-001)."
    title: "Describe the role and component (e.g., @Developer Implement User Authentication)."
    complexity: medium
    dependencies: [] # List any dependencies on other sub-PRBs.
    complete_context:
      inherit_all: true  # Inherits ALL parent context
      # No need to specify project, settings, git_privacy, etc. here if inherit_all is true.
    requirements:
      functional: ["Describe functional requirements for this sub-component."]
      processual: 
        - "Respect git_privacy setting for commit messages"
        - "Follow branch protection strategy from config"
        - "Use configured default branch for operations"
        - "Apply configured branch naming strategy"
      technical: ["Specify technical details for this sub-component."]
    git_operations:
      branch_strategy: "Dynamically inherited from parent PRB."
      branch_protection: "Dynamically inherited from parent PRB."
      privacy_filter: "Dynamically inherited from parent PRB."
      default_branch: "Dynamically inherited from parent PRB."
    knowledge_management:
      structure: "memory/[topic]/[subtopic].md" # Example: memory/auth/user-auth.md
      storage: "not-version-controlled" # Knowledge in ./memory should NEVER be version controlled for this project.
    review_process:
      type: "sme_review"
      inherit_from_parent: true
    implementation_samples:
      example_commit: "Example commit message for this sub-PRB."
    
  - id: "Dynamically generated ID (e.g., MEDIUM-002)."
    title: "Describe the role and component (e.g., @Developer Implement User Profile Management)."
    complexity: medium
    dependencies: ["Dynamically generated ID (e.g., MEDIUM-001)."] # List any dependencies on other sub-PRBs.
    complete_context:
      inherit_all: true  # Inherits ALL parent context
      # No need to specify project, settings, git_privacy, etc. here if inherit_all is true.
    requirements:
      functional: ["Describe functional requirements for this sub-component."]
      processual:
        - "Respect git_privacy setting for commit messages"
        - "Follow branch protection strategy from config"
        - "Use configured default branch for operations"
        - "Apply configured branch naming strategy"
      technical: ["Specify technical details for this sub-component."]
    git_operations:
      branch_strategy: "Dynamically inherited from parent PRB."
      branch_protection: "Dynamically inherited from parent PRB."
      privacy_filter: "Dynamically inherited from parent PRB."
      default_branch: "Dynamically inherited from parent PRB."
    knowledge_management:
      structure: "memory/[topic]/[subtopic].md" # Example: memory/user/profile-management.md
      storage: "not-version-controlled" # Knowledge in ./memory should NEVER be version controlled for this project.
    review_process:
      type: "sme_review"
      inherit_from_parent: true
    implementation_samples:
      example_commit: "Example commit message for this sub-PRB."
    
  - id: "Dynamically generated ID (e.g., TINY-001)."
    title: "Describe the role and task (e.g., @Developer Update Configuration)."
    complexity: tiny
    dependencies: [] # List any dependencies on other sub-PRBs.
    complete_context:
      inherit_all: true  # Inherits ALL parent context
      # No need to specify project, settings, git_privacy, etc. here if inherit_all is true.
    requirements:
      functional: ["Describe functional requirements for this configuration task."]
      processual:
        - "Respect git_privacy setting for commit messages"
        - "Follow branch protection strategy from config"
        - "Use configured default branch for operations"
        - "Apply configured branch naming strategy"
      technical: ["Specify technical details for this configuration task."]
    git_operations:
      branch_strategy: "Dynamically inherited from parent PRB."
      branch_protection: "Dynamically inherited from parent PRB."
      privacy_filter: "Dynamically inherited from parent PRB."
      default_branch: "Dynamically inherited from parent PRB."
    knowledge_management:
      structure: "memory/[topic]/[subtopic].md" # Example: memory/config/settings-update.md
      storage: "not-version-controlled" # Knowledge in ./memory should NEVER be version controlled for this project.
    review_process:
      type: "minimal_self_review"
      inherit_from_parent: true
    implementation_samples:
      example_commit: "Example commit message for this sub-PRB."
    
# Coordination strategy
execution_strategy:
  parallel_groups:
    - "List groups of sub-PRBs that can run in parallel (e.g., [\"SUB-PRB-A\", \"SUB-PRB-B\"])."
    - "Define dependencies between parallel groups."
    
  integration_points:
    - between: "Specify sub-PRBs that have integration points (e.g., [\"SUB-PRB-A\", \"SUB-PRB-B\"])."
      validate: "Describe the validation required at this integration point (e.g., API contract, data consistency)."

      
# Sequential thinking for complex decisions
sequential_thinking:
  required: true
  command: "/icc-think-sequential"
  focus_areas:
    - "Key architectural decisions to be made."
    - "Approach for integrating different components or systems."
    - "Identification and assessment of potential risks."
    
# Multiple validation gates
validation_gates:
  - after: "Specify when this gate should be triggered (e.g., after: \"SUB-PRB-ID\")."
    check: "Describe the validation check (e.g., \"Code audit\")."
    reviewer: "Dynamically assigned _SPECIALIST_-SME (e.g., @Security-Engineer)."
    
  - after: "all_complete"
    check: "Describe the final validation check (e.g., \"End-to-end integration test\")."
    reviewer: "Dynamically assigned _SPECIALIST_-SME (e.g., @QA-Engineer)."
    
# MANDATORY: Git Operations Section
# ⚠️ git_privacy: true = NO "Generated with Claude Code", NO "Co-Authored-By: Claude"
# ⚠️ SUB-PRB COORDINATION: All sub-PRBs must follow same git privacy settings
git_operations:
  branch_strategy: "Dynamically injected from config (e.g., 'feature/')."
  branch_protection: "Dynamically injected from config (e.g., 'true')."
  branch_name: "Dynamically generated (e.g., 'feature/STORY-001-implement-feature')."
  commit_coordination: "sub_prb_aware" # Indicates that commits are coordinated across sub-PRBs.
  privacy_filter: "Dynamically injected from config (e.g., 'true')."
  default_branch: "Dynamically injected from config (e.g., 'main')."
  version_bump: "Specify 'MINOR' for features, 'MAJOR' for breaking changes."
  merge_request: true # Parent asks user
  squash_commits: true

# MANDATORY: Knowledge Management Section
knowledge_management:
  structure: "memory/[topic]/[subtopic].md" # Example: memory/architecture/system-design.md
  storage: "not-version-controlled" # Knowledge in ./memory should NEVER be version controlled for this project.
  complex_pattern_capture: true # Indicates that complex patterns are captured.
  sub_prb_learning_aggregation: true # Indicates that learnings from sub-PRBs are aggregated.
  capture_points:
    - "Describe key architectural patterns identified."
    - "Outline approaches for integrating different components."
    - "Summarize insights on coordinating sub-PRB execution."
  store_as: "ComplexPattern" # Indicates the type of pattern being stored.

# MANDATORY: Review Process Section
review_process:
  type: "multi_gate_review"
  validation_gates:
    - after: "Specify when this gate should be triggered (e.g., after: \"SUB-PRB-ID\")."
      check: "Describe the validation check (e.g., \"Security review\", \"Code audit\")."
      reviewer: "Dynamically assigned _SPECIALIST_-SME (e.g., @Security-Engineer)."
    - after: "all_complete"
      check: "Describe the final validation check (e.g., \"End-to-end integration test\")."
      reviewer: "Dynamically assigned _SPECIALIST_-SME (e.g., @QA-Engineer)."
  coordination: "continuous" # Describes how review coordination is handled.
  escalation: "architect_consultation" # Describes the escalation process for review issues.

# MANDATORY: Documentation Management Section
documentation_management:
  required_updates:
    changelog:
      file: "CHANGELOG.md"
      entry_format: |
        ## [VERSION] - DATE
        ### Added
        - Describe the large feature.
        - List key capabilities added.
        ### Changed
        - Describe architectural changes, if any.
      semantic_versioning: true
      mandatory: true
      
    readme:
      file: "README.md"  
      update_required: "YES" # Set to YES for major features.
      sections_affected: "List affected sections (e.g., Features, Installation, Usage, Architecture)."
      user_impact: "Provide a comprehensive description of the user impact."
      
    api_docs:
      update_required: "NO" # Set to YES if API changes are made.
      files_affected: "List affected API documentation files (e.g., docs/api/auth.md)."
      breaking_changes: "NO" # Set to YES/NO with details if breaking changes are introduced.
      
    user_guides:
      update_required: "NO" # Set to YES for new workflows.
      guides_affected: "List affected user guide files (e.g., docs/guides/new-workflow.md)."
      new_features: "Describe new features requiring documentation."
    
  release_management:
    github_release: "YES"                    # Always for minor versions
    release_notes: "YES"                     # Comprehensive feature documentation
    migration_guide: "NO"     # Set to YES if breaking changes require a migration guide.
    announcement: "NO" # Set to YES for major features (e.g., Blog/announcement consideration).
    
  validation_checklist:
    - "CHANGELOG.md updated with comprehensive feature description"
    - "Version bumped (minor) for feature additions"
    - "README.md updated with new capabilities and usage"
    - "API documentation updated for all new endpoints"
    - "User guides created/updated for new workflows"
    - "GitHub release created with detailed release notes"
    - "Migration guide provided if breaking changes"

# MANDATORY: Implementation Samples Section
# ⚠️ EXECUTION CHECKLIST: All 6 sections + sub-PRB coordination must be completed
implementation_samples:
  example_commit: "Example commit message for this PRB type."
  example_branch: "Example branch name for this PRB type."
  example_scope: |
    Describe the scope of changes, including sub-PRBs and coordination (e.g.,
    Sub-PRBs:
    - SUB-PRB-ID: Description
    - SUB-PRB-ID: Description
    Complex coordination across multiple files and services).

  execution_checklist: |
    ☐ Complete Context Section - Settings and scope loaded for parent + all sub-PRBs
    ☐ Requirements Section - All functional/processual/technical requirements met
    ☐ Git Operations Section - Coordination strategy with privacy_filter for all
    ☐ Documentation Updates Section - CHANGELOG.md and architecture docs updated
    ☐ Knowledge Management Section - Complex patterns captured + stored
    ☐ Review Process Section - Multi-gate reviews completed at each validation point
    ☐ Documentation Management Section - CHANGELOG, README, and release docs updated
    ☐ Implementation Samples Section - Applied with proper sub-PRB coordination
    ☐ SUB-PRB INHERITANCE - All sub-PRBs have complete 6-section context
    ☐ SUB-PRB EXECUTION - Each sub-PRB follows its own mandatory checklist
    
    SKIP NOTHING. EXECUTE EVERYTHING. COORDINATE ALL SUB-PRBS. FULL LIFECYCLE DELIVERY.

# Complex learning capture
learning_strategy:
  capture_points:
    - "Describe key architectural patterns identified during the project."
    - "Outline successful integration approaches used."
    - "Summarize insights gained from coordinating sub-PRB execution."
  store_as: "ComplexPattern" # Indicates the type of pattern being stored (e.g., ComplexPattern, ArchitecturalPattern).