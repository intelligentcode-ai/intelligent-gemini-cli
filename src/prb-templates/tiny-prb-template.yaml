# Tiny PRB Template - Simple Single-File Changes  
# Auto-selected for simple instruction complexity (3-5 points) - AI executes instantly

# ⚠️ CRITICAL: ALL 6 SECTIONS MANDATORY - SKIP NOTHING
# ⚠️ SETTINGS ENFORCEMENT: git_privacy: true = NO AI mentions in commits

id: "[PARENT_ID]-PRB-[NEXT_NUMBER]-[TITLE]-[CURRENT_DATE]"
type: tiny-prb
complexity: simple
priority: "[PRIORITY_LEVEL]"  # CRITICAL, HIGH, MEDIUM, LOW
title: "[ROLE] [DESCRIPTION]"

# MANDATORY: Complete Context Section
complete_context:
  project: "Dynamically injected project context from GEMINI.md."
  settings: "Dynamically injected all configuration values."
  git_privacy: "Dynamically injected git_privacy setting from config."
  branch_protection: "Dynamically injected branch_protection from config."
  default_branch: "Dynamically injected default_branch from config."
  branch_strategy: "Dynamically injected branch_prefixes from config."
  scope: "Describe the scope of the change (e.g., 'Single file modification to src/utils.js')."
  best_practices: [] # Dynamically injected relevant best practices (minimal for simple changes).
  
# MANDATORY: Requirements Section
requirements:
  functional:
    - "Describe the specific change to be made (e.g., 'Update function signature')."
    - "Explain why this change is needed (e.g., 'To fix a bug', 'To add a new feature')."
    - "Specify the expected outcome after the change (e.g., 'Function returns correct value')."
  processual:
    - "Respect git_privacy setting for commit messages"
    - "Follow branch protection strategy from config"
    - "Use configured default branch for operations"
    - "Apply configured branch naming strategy"
  technical:
    - "Single file modification only"
    - "Under 50 lines of changes"
  
execution:
  memory_check: "Describe any quick memory pattern searches needed for instant AI execution."
  steps:
    - "Outline the first step of execution."
    - "Detail the second step of execution."
    - "Add optional third step if needed."
    
validation:
  - "Describe the first validation check."
  - "Describe the second validation check."

# MANDATORY: Git Operations Section
# ⚠️ git_privacy: true = NO "Generated with Claude Code", NO "Co-Authored-By: Claude"
git_operations:
  branch_strategy: "Dynamically injected from config (e.g., 'feature/')."
  branch_protection: "Dynamically injected from config (e.g., 'true')."
  branch_name: "Dynamically generated (e.g., 'feature/TINY-001-fix-bug')."
  commit_format: "Dynamically generated (e.g., 'TINY-001: Fix bug')."
  privacy_filter: "Dynamically injected from config (e.g., 'true')."
  default_branch: "Dynamically injected from config (e.g., 'main')."
  version_bump: "Specify 'NONE' for trivial changes, 'PATCH' for bug fixes."

# MANDATORY: Documentation Updates Section
documentation_updates:
  - file: "CHANGELOG.md"
    action: "Update with a concise description of the PR's changes."
  - file: "README.md" # Or other relevant documentation files.
    action: "Describe updates to user-facing documentation if affected."

# MANDATORY: Knowledge Management Section
knowledge_management:
  structure: "memory/[topic]/[subtopic].md" # Example: memory/fix/bug-fix.md
  storage: "not-version-controlled" # Knowledge in ./memory should NEVER be version controlled for this project.
  quick_search: "Indicates if quick pattern-based search is enabled."
  capture_condition: "Specify condition for capturing knowledge (e.g., 'if_novel_pattern')."
  capture_type: "Specify the type of knowledge captured (e.g., 'implementation_approach')."

# MANDATORY: Review Process Section
review_process:
  type: "minimal_self_review"
  checklist:
    - "Configuration settings applied correctly"
    - "Single file scope maintained"
    - "Functional requirements met"
  escalation: "Describe escalation process (e.g., 'if_validation_fails')."

# MANDATORY: Documentation Management Section
documentation_management:
  required_updates:
    changelog:
      file: "CHANGELOG.md"
      entry_format: |
        ### Added/Fixed/Changed
        - Describe the tiny change (e.g., 'Fixed typo in README.md').
      semantic_versioning: true
      mandatory: true
      
    readme:
      file: "README.md"  
      update_required: "NO" # Set to YES if user-facing documentation is changed.
      sections_affected: "List affected sections (e.g., 'Usage', 'Installation')."
      
  release_management:
    github_release: "NO"     # Patch bumps don't need releases.
    release_notes: "NO"      # Simple changes documented in CHANGELOG only.
    
  validation_checklist:
    - "CHANGELOG.md updated with appropriate entry"
    - "Version bumped (patch) for accumulation of changes"
    - "README updated if user-facing change"

# MANDATORY: Implementation Samples Section
# ⚠️ EXECUTION CHECKLIST: All 6 sections must be completed
implementation_samples:
  example_commit: "Example commit message for this PRB type."
  example_branch: "Example branch name for this PRB type."
  example_change: |
    Describe the specific change (e.g.,
    File: src/module/file.js
    - Add new function
    - Update existing logic).
  
  execution_checklist: |
    ☐ Complete Context Section - Settings loaded and applied
    ☐ Requirements Section - All requirements met  
    ☐ Git Operations Section - Commands executed with privacy_filter
    ☐ Documentation Updates Section - CHANGELOG.md and affected files updated
    ☐ Knowledge Management Section - Pattern search + capture if novel
    ☐ Review Process Section - Self-review completed or escalated
    ☐ Documentation Management Section - CHANGELOG updated, version bumped if needed
    ☐ Implementation Samples Section - Applied correctly
    
    SKIP NOTHING. EXECUTE EVERYTHING. DOCUMENT ALL CHANGES.
  
learning_capture:
  condition: "Specify condition for capturing knowledge (e.g., 'if_novel_pattern')."
  type: "Specify the type of knowledge captured (e.g., 'implementation_approach')."
  storage: "memory/[topic]/[subtopic].md" # Example: memory/fix/bug-fix.md
  version_control: false # Knowledge in ./memory should NEVER be version controlled for this project.