# Medium PRB Template - Standard Features
# For moderate instruction complexity (6-15 points) - AI executes instantly
# Provides complete instructions for multi-file features

# ⚠️ CRITICAL: FOLLOW ALL SECTIONS - SKIP NOTHING
# ⚠️ SETTINGS: git_privacy: true = NO AI mentions in commits
# ⚠️ TEMPLATES: [DYNAMIC_*_PRACTICES] placeholders get filled with actual content

id: "[PARENT_ID]-PRB-[NEXT_NUMBER]-[TITLE]-[CURRENT_DATE]"
type: medium-prb
complexity: standard
priority: "[PRIORITY_LEVEL]"  # CRITICAL, HIGH, MEDIUM, LOW
title: "[ROLE] [DESCRIPTION]"

# MANDATORY: Complete Context Section
complete_context:
  project: "Dynamically injected project context from GEMINI.md."
  settings: "Dynamically injected all configuration values."
  git_privacy: "Dynamically injected git_privacy setting from config."
  branch_protection: "Dynamically injected branch_protection from config."
  default_branch: "Dynamically injected default_branch from config."
  branch_strategy: "Dynamically injected branch_prefixes from config."
  scope: "[FEATURE_SCOPE]"
  best_practices: [] # Dynamically injected best practices from best-practices/ directory.
  code_samples: [] # Dynamically injected code samples based on context.
  external_docs: [] # Dynamically injected external documentation links.
  
# MANDATORY: Requirements Section
requirements:
  functional:
    - "Describe user-facing features or changes."
    - "Specify expected outcomes or behaviors."
    - "List any new capabilities or modifications."
  processual:
    - "Respect git_privacy setting for commit messages"
    - "Follow branch protection strategy from config"
    - "Use configured default branch for operations"
    - "Apply configured branch naming strategy"
  technical:
    - "Write AI instructions in clear, simple language"
    - "Specify technical implementation details or approaches."
  constraints:
    coding_style: "Standard project coding style."
    architecture: "Existing project architecture."
    infrastructure: "Existing project infrastructure."
    security: "Standard project security practices."
    quality: "Standard project quality practices."
    
# Embedded learnings and best-practices (no runtime search needed)
embedded_learnings: [] # Dynamically injected relevant learnings from memory/.

embedded_best_practices: [] # Dynamically injected relevant best practices.
  
# Execution plan with configurable behaviors
execution_plan:
  approach: "Describe the high-level technical approach to solve the problem."
  behavioral_overrides:  # Project-specific behavior customization
    error_handling: "Standard project error handling strategy."
    testing_approach: "Standard project testing strategy."
    review_process: "Standard project review process."
  steps:
    - "Outline the design phase steps."
    - "Detail the implementation phase steps."
    - "Describe the testing and verification steps."
    - "Explain the integration and deployment steps."
    
# Instructions for what to create/modify  
what_to_do:
  files_to_modify:
    - path: "Specify the path to the file to be modified (e.g., src/main.py)."
      changes: "Describe the changes to be made in this file (e.g., Add new function, Refactor existing logic)."
    - path: "Add more files as needed."
      changes: "Describe changes for additional files."
      
how_to_validate:
  technical:
    - "Describe technical validation steps (e.g., Run unit tests, Check code coverage)."
    - "Specify tools or commands for technical verification."
  functional:
    - "Describe functional validation steps (e.g., Manual testing, User acceptance testing)."
    - "Specify expected user interactions or outcomes."
    
# Expert to review the work
expert_review:
  reviewer: "Dynamically assigned SME (e.g., @Architect, @Security-Engineer)."
  focus_areas: ["Technical design", "Code quality", "Security implications"]
  max_cycles: 3
  
# MANDATORY: Git Operations Section
# ⚠️ git_privacy: true = NO "Generated with Claude Code", NO "Co-Authored-By: Claude"
git_operations:
  branch_strategy: "Dynamically injected from config (e.g., 'feature/')."
  branch_protection: "Dynamically injected from config (e.g., 'true')."
  branch_name: "Dynamically generated (e.g., 'feature/STORY-001-implement-feature')."
  commit_format: "Dynamically generated (e.g., 'STORY-001: Implement feature')."
  privacy_filter: "Dynamically injected from config (e.g., 'true')."
  default_branch: "Dynamically injected from config (e.g., 'main')."
  version_bump: "Specify 'PATCH' for bug fixes, 'MINOR' for new features, 'MAJOR' for breaking changes."

# MANDATORY: Documentation Updates Section
documentation_updates:
  - file: "CHANGELOG.md"
    action: "Update with a concise description of the PR's changes."
  - file: "README.md" # Or other relevant documentation files.
    action: "Describe updates to user-facing documentation if affected."
  
# MANDATORY: Knowledge Management Section
knowledge_management:
  structure: "memory/[topic]/[subtopic].md" # Example: memory/authentication/oauth2-patterns.md
  storage: "not-version-controlled" # Knowledge in ./memory should NEVER be version controlled for this project.
  embedded_learnings: "Dynamically injected relevant learnings."
  capture_patterns: "Describe new patterns discovered during implementation."
  capture_insights: "Summarize key insights or lessons learned."
  store_location: "memory/[topic]/[subtopic].md" # Example: memory/authentication/oauth2-patterns.md

# MANDATORY: Review Process Section
review_process:
  type: "sme_review"
  reviewer: "Dynamically assigned _SPECIALIST_-SME based on task scope."
  focus_areas: [] # Dynamically injected focus areas based on task scope.
  max_cycles: 3
  checklist:
    - "Configuration settings applied correctly"
    - "Multi-file coordination successful"
    - "Functional requirements met"
    - "Technical constraints satisfied"

# MANDATORY: Documentation Management Section
documentation_management:
  required_updates:
    changelog:
      file: "CHANGELOG.md"
      entry_format: |
        ## [VERSION] - DATE
        ### Added/Fixed/Changed/Removed
        - Describe the feature, fix, or change.
      semantic_versioning: true
      mandatory: true
      
    readme:
      file: "README.md"  
      update_required: "YES" # Set to YES if user-facing changes are made.
      sections_affected: "List affected sections (e.g., Features, Usage, Installation)."
      user_impact: "Describe the impact on the user (e.g., New capabilities, Changed behavior)."
      
    api_docs:
      update_required: "NO" # Set to YES if API changes are made.
      files_affected: "List affected API documentation files (e.g., docs/api/auth.md)."
      breaking_changes: "NO" # Set to YES if breaking changes are introduced.
      
  release_management:
    github_release: "YES"  # Set to YES for minor version bumps (new features).
    release_notes: "YES"   # Set to YES to document new features or significant changes.
    migration_guide: "NO" # Set to YES if breaking changes require a migration guide.
    
  validation_checklist:
    - "CHANGELOG.md updated with feature/fix description"
    - "Version bumped appropriately (patch/minor)"
    - "README.md updated if user-facing changes"
    - "API docs updated if applicable"
    - "GitHub release created if minor version bump"

# MANDATORY: Implementation Samples Section
# ⚠️ EXECUTION CHECKLIST: All 6 sections must be completed
implementation_samples:
  example_commit: "Example commit message for this PRB type."
  example_branch: "Example branch name for this PRB type."
  example_scope: |
    Describe the scope of changes (e.g., Files: src/module/file.py,
    - Add new function
    - Refactor existing class).

  execution_checklist: |
    ☐ Complete Context Section - Settings, best practices, code samples loaded
    ☐ Requirements Section - All functional/processual/technical requirements met
    ☐ Git Operations Section - Branch created, commits with privacy_filter
    ☐ Documentation Updates Section - CHANGELOG.md and affected files updated
    ☐ Knowledge Management Section - Patterns captured + stored in memory/
    ☐ Review Process Section - SME review completed with max 3 cycles
    ☐ Documentation Management Section - CHANGELOG, README, docs updated + release if minor
    ☐ Implementation Samples Section - Applied correctly with multi-file scope
    
    SKIP NOTHING. EXECUTE EVERYTHING. FULL LIFECYCLE DELIVERY.

# Store new learnings in version control
learning_capture:
  patterns: "Describe new patterns discovered during implementation."
  insights: "Summarize key insights or lessons learned."
  store_location: "memory/[topic]/[subtopic].md" # Example: memory/authentication/oauth2-patterns.md
  version_control: false # Knowledge in ./memory should NEVER be version controlled for this project.