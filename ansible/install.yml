---
# Intelligent Gemini CLI Installation Playbook
# Based on Intelligent Claude Code installation system

- name: Install Intelligent Gemini CLI
  hosts: localhost
  connection: local
  gather_facts: yes
  
  vars:
    gemini_home: "{{ ansible_env.HOME }}/.gemini"
    project_root: "{{ playbook_dir }}/.."
    timestamp: "{{ ansible_date_time.iso8601_basic_short }}"
    mcp_config_path: "" # New variable, default empty
    api_keys_file: "" # New variable, default empty
    temp_settings_json_path: "/tmp/settings_{{ ansible_date_time.iso8601_basic_short }}.json" # New variable
    
  tasks:
    - name: Create .gemini directory structure
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ gemini_home }}"
        - "{{ gemini_home }}/commands"
        - "{{ gemini_home }}/behaviors"
        - "{{ gemini_home }}/roles"
        - "{{ gemini_home }}/prb-templates"
        - "{{ gemini_home }}/memory"
        - "{{ gemini_home }}/backups"
      tags: [install, update]

    - name: Copy behavioral patterns
      copy:
        src: "{{ project_root }}/src/behaviors/"
        dest: "{{ gemini_home }}/behaviors/"
        mode: '0644'
      tags: [install, update]

    - name: Copy role definitions
      copy:
        src: "{{ project_root }}/src/roles/"
        dest: "{{ gemini_home }}/roles/"
        mode: '0644'
      tags: [install, update]

    - name: Copy PRB templates
      copy:
        src: "{{ project_root }}/src/prb-templates/"
        dest: "{{ gemini_home }}/prb-templates/"
        mode: '0644'
      tags: [install, update]

    - name: Copy TOML commands
      copy:
        src: "{{ project_root }}/src/commands/"
        dest: "{{ gemini_home }}/commands/"
        mode: '0644'
      tags: [install, update]

    - name: Check for existing GEMINI.md
      stat:
        path: "{{ gemini_home }}/GEMINI.md"
      register: gemini_md_stat
      tags: [install]

    - name: Create minimal GEMINI.md if none exists
      blockinfile:
        path: "{{ gemini_home }}/GEMINI.md"
        create: yes
        marker: "# {mark} INTELLIGENT GEMINI CLI IMPORTS"
        block: |
          # Intelligent Gemini CLI

          This file bootstraps the Intelligent Gemini CLI system.
          Core behaviors are imported from the virtual team module.

          ## Virtual Team System
          @~/.gemini/behaviors/virtual-team.md
      when: not gemini_md_stat.stat.exists
      tags: [install]

    - name: Ensure virtual-team import exists in existing GEMINI.md
      lineinfile:
        path: "{{ gemini_home }}/GEMINI.md"
        line: "@~/.gemini/behaviors/virtual-team.md"
        regexp: "^@~/.gemini/behaviors/virtual-team.md"
      when: gemini_md_stat.stat.exists
      tags: [install]

    - name: Check for existing settings.json
      stat:
        path: "{{ gemini_home }}/settings.json"
      register: settings_json_stat
      tags: [install]

    - name: Copy minimal settings.json if none exists
      copy:
        src: "{{ project_root }}/settings.json"
        dest: "{{ gemini_home }}/settings.json"
        mode: '0644'
      when: not settings_json_stat.stat.exists
      tags: [install]

    - name: Check for MCP manifest file
      stat:
        path: "{{ mcp_config_path if mcp_config_path else project_root + '/mcp-manifest.json' }}"
      register: mcp_manifest_stat
      tags: [install, update]

    - name: Read MCP manifest
      slurp:
        src: "{{ mcp_config_path if mcp_config_path else project_root + '/mcp-manifest.json' }}"
      register: mcp_manifest_content
      when: mcp_manifest_stat.stat.exists
      tags: [install, update]

    - name: Parse MCP manifest JSON
      set_fact:
        mcp_manifest: "{{ mcp_manifest_content.content | b64decode | from_json }}"
      when: mcp_manifest_stat.stat.exists
      tags: [install, update]

    - name: Set empty mcp_manifest if file does not exist
      set_fact:
        mcp_manifest: {}
      when: not mcp_manifest_stat.stat.exists
      tags: [install, update]

    - name: Read API keys file
      slurp:
        src: "{{ api_keys_file }}"
      register: api_keys_content
      when: api_keys_file is not none and api_keys_file != ""
      tags: [install, update]

    - name: Parse API keys
      set_fact:
        api_keys: "{{ api_keys_content.content | b64decode | split('\n') | select('match', '^[^=]+=(.*)') | map('split', '=', 1) | map('map', 'trim') | list }}"
      tags: [install, update]

    - name: Read existing settings.json
      slurp:
        src: "{{ gemini_home }}/settings.json"
      register: settings_json_content
      tags: [install, update]

    - name: Parse settings.json JSON
      set_fact:
        current_settings: "{{ settings_json_content.content | b64decode | from_json }}"
      tags: [install, update]

    - name: Ensure mcpServers block exists in settings.json
      set_fact:
        current_settings: "{{ current_settings | combine({'mcpServers': {}}) }}"
      when: current_settings.mcpServers is not defined
      tags: [install, update]

    - name: Add or update MCPs in settings.json
      set_fact:
        current_settings: "{{ current_settings | combine({'mcpServers': current_settings.mcpServers | combine({item.key: item.value})}) }}"
      loop: "{{ mcp_manifest.mcpServers | dict2items }}"
      when: item.key not in current_settings.mcpServers
      tags: [install, update]

    - name: Perform API key substitution in settings.json content
      set_fact:
        current_settings_str: "{{ current_settings | to_json }}"
      when: api_keys is defined and api_keys | length > 0
      tags: [install, update]

    - name: Debug API keys content
      debug:
        var: api_keys
      when: api_keys is defined and api_keys | length > 0

    - name: Prepare API key substitution data
      set_fact: 
        api_key_sub_data: "{{ api_keys | json_query('[*].{key: [0], value: [1]}') }}"

    - name: Replace API key placeholders
      set_fact:
        current_settings_str: "{{ current_settings_str | replace('${' + item.key + '}', item.value) }}"
      loop: "{{ api_key_sub_data | list }}"
      when: api_key_sub_data is defined and api_key_sub_data | length > 0
      tags: [install, update]

    - name: Convert modified settings string back to JSON
      set_fact:
        current_settings: "{{ current_settings_str | from_json }}"
      when: api_keys is defined and api_keys | length > 0
      tags: [install, update]

    - name: Write updated settings.json
      copy:
        content: "{{ current_settings | to_nice_json }}"
        dest: "{{ gemini_home }}/settings.json"
        mode: '0644'
      tags: [install, update]

    - name: Copy system configuration
      copy:
        src: "{{ project_root }}/src/config.md"
        dest: "{{ gemini_home }}/config.md"
        mode: '0644'
      tags: [install]

    - name: Initialize memory system
      file:
        path: "{{ gemini_home }}/memory/{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - authentication
        - errors
        - performance
        - deployment
        - configuration
        - migration
        - system-setup
        - integration
        - installation
      tags: [install]

    - name: Copy memory index
      copy:
        src: "{{ project_root }}/memory/index.md"
        dest: "{{ gemini_home }}/memory/index.md"
        mode: '0644'
      tags: [install, update]

    - name: Check Gemini CLI installation
      command: which gemini
      register: gemini_check
      ignore_errors: yes
      changed_when: false
      tags: [install]

    - name: Display Gemini CLI status
      debug:
        msg: "{{ 'Gemini CLI found at: ' + gemini_check.stdout if gemini_check.rc == 0 else 'Gemini CLI not found - please install separately' }}"
      tags: [install]

    - name: Create installation marker
      copy:
        content: |
          Intelligent Gemini CLI
          Installed: {{ ansible_date_time.iso8601 }}
          Version: 1.0.0
          Source: {{ project_root }}
        dest: "{{ gemini_home }}/.installed"
        mode: '0644'
      tags: [install]

    - name: Display installation summary
      debug:
        msg:
          - "âœ… Intelligent Gemini CLI installed successfully!"
          - "Installation directory: {{ gemini_home }}"
          - "Commands available in: {{ gemini_home }}/commands/"
          - "Behavioral patterns in: {{ gemini_home }}/behaviors/"
          - "PRB templates in: {{ gemini_home }}/prb-templates/"
      when: api_keys_content is defined and api_keys_content.content is defined
      tags: [install, update]